name: Build Server

on:
  push:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-client:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: cache
        id: cache-key
        run: echo "CLIENT_CACHE_KEY=client-cache-${{ hashFiles('client/**') }}" >> $GITHUB_OUTPUT
      - uses: actions/cache/restore@v4
        id: restore-cache
        with:
          path: server/static
          key: ${{ steps.cache-key.outputs.CLIENT_CACHE_KEY }}
      - name: Setup node
        if: ${{ !steps.restore-cache.outputs.cache-hit }}
        uses: actions/setup-node@v4
        with:
          node-version: latest
          architecture: x64
          check-latest: true
          cache: npm
          cache-dependency-path: "**/package.json"
      - name: Build client
        if: ${{ !steps.restore-cache.outputs.cache-hit }}
        run: |
          cd client
          npm install
          NODE_OPTIONS=--openssl-legacy-provider npm run build
      - uses: actions/cache/save@v4
        if: ${{ !steps.restore-cache.outputs.cache-hit }}
        with:
          path: server/static
          key: ${{ steps.cache-key.outputs.CLIENT_CACHE_KEY }}
      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: static
          path: server/static

  build-server:
    runs-on: ubuntu-latest
    needs: [build-client]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        name: static
      - name: strip static
        run: |
          find static -name "*.br" -type f -delete
          find static -name "*.css" -type f -delete
          find static -name "*.js" -type f -delete
          find static -name "*.html" -type f -delete
          find static -name "*.svg" -type f -delete
      - name: Build executable
        run: |
          mv static server-c/
          mkdir -p server-c/build
          cd server-c/build
          cmake -DZIG_TARGET=x86_64-linux-musl -DPACKAGE_FILE=ON -DCMAKE_BUILD_TYPE=MinSizeRel ..
          cmake --build .
          sudo apt-get install llvm --no-install-recommends
          llvm-strip cloud_clipboard
          tar -czvf cloud_clipboard.tar.gz cloud_clipboard
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: x86_64-linux-musl
          path: server-c/build/cloud_clipboard.tar.gz
